requirejs(['ext_editor_io2', 'jquery_190', 'raphael_210'],
    function (extIO, $) {
        function bishopVsAliensVisualization(tgt_node, data) {

            if (!data || !data.ext) {
                return
            }

            /**
             * 
             * attr
             * 
             */
            const attr = {
                grid: {
                    'stroke-width': '1px',
                    'stroke': '#82D1F5',
                    'stroke': '#65A1CF',
                },
                door: {
                    'stroke-width': '1px',
                    'stroke': '#65A1CF',
                    'stroke': '#006CA9',
                },
                alien: {
                    face: {
                        'fill': '#65A1CF',
                        'fill': '#006CA9',
                        'stroke-width' : '0px',
                    },
                    eye: {
                        'fill': '#FFFFFF',
                        'stroke-width' : '0px',
                    },
                },
                bishop: {
                    'fill': '#65A1CF',
                    'fill': '#006CA9',
                    'stroke-width' : '0px',
                },
                escape_way: {
                'arrow-end': 'block-wide-long',
                }
            }

            /**
            * 
            * values
            * 
            */
            const input = data.in
            const grid_seize_px_h = 200
            const grid_seize_px_w = 200
            const os = 10
            const [sx, sy, width, height, aliens] = input
            const unit = 200 / Math.max(width, height)
            const scale = unit / 40
            const bishop = [sx, sy]
            const exits = [[0, 0], [width-1, 0], [0, height-1], [width-1, height-1]]

            const a1 = "m 17.7935292,41.449303799999996 c -3.4160381999999996,-0.3391722 -5.748345,-1.1782674 -7.1381898,-2.5681122 -0.8588628,-0.8588628 -1.3641732,-1.7857872 -1.7094258,-3.1357098 -0.2551518,-0.9976356 -0.2690676,-1.5278562 -0.2672136,-10.1814804 l 0.0019619999999999998,-9.12903678 0.6644772,-1.38169638 c 0.8075393999999999,-1.6791722999999998 1.5291972,-2.7616008599999997 2.6150795999999996,-3.92241312 1.630521,-1.74303216 3.8397384000000003,-3.0555504 6.1017606,-3.62511864 1.0998611999999999,-0.2769408 1.1978604,-0.28054278 2.1298985999999998,-0.07828272 3.9296034,0.8527566599999999 7.357402799999999,3.83518638 9.1956528,8.00087346 l 0.528705,1.1981034 -0.0441072,9.293194979999999 c -0.040546799999999994,8.5436136 -0.0640422,9.3535614 -0.2912922,10.041587999999999 -0.8817354,2.6695781999999997 -2.6156934,4.1798196 -5.695218,4.9604166 -1.8833274,0.4773852 -4.4016534,0.6955127999999999 -6.092083799999999,0.5276736 z"
            const a2 = "m 15.074046,36.089487 c -1.0146924,-0.3506256 -1.708452,-0.8547786 -2.2023576,-1.6004412 -0.4149054,-0.626391 -0.9016938,-1.9344887999999998 -0.7691975999999999,-2.066985 0.111429,-0.1114272 2.1469518,0.6604901999999999 3.0294216,1.1488266 0.9496169999999999,0.5254938 2.2884444,1.7067546 2.662506,2.3491548 l 0.2458188,0.4221576 -1.1302812,-0.004428 c -0.7227252,-0.002862 -1.3847184,-0.0923634 -1.83591,-0.248274 z"
            const a3 = "m 23.737316399999997,36.089487 c 1.0146942,-0.3506274 1.708452,-0.8547786 2.2023593999999997,-1.6004412 0.4149054,-0.626391 0.9016938,-1.9344887999999998 0.7691975999999999,-2.066985 -0.111429,-0.1114272 -2.1469518,0.6604901999999999 -3.0294216,1.1488266 -0.9496188,0.5254938 -2.2884462,1.7067546 -2.6625077999999998,2.3491548 l -0.2458188,0.4221576 1.130283,-0.004428 c 0.7227234,-0.002862 1.3847166,-0.0923634 1.8359082,-0.248274 z"
            const b1 = "m 3.8998427579999997,37.258468380000004 c -1.32460902,-0.6531587999999999 -1.0774171799999999,-2.56358592 0.38257254,-2.95671978 l 0.49960763999999996,-0.13453020000000002 -0.62313174,-0.35588574 c -0.90480096,-0.51675246 -1.1247516000000002,-1.121715 -0.7188363,-1.9771163999999999 0.28155707999999996,-0.59333904 0.57363642,-0.76030794 2.49005106,-1.42345476 1.88224344,-0.65132172 2.00628414,-0.79384284 1.34570772,-1.5461964 -0.42531552,-0.48440826000000003 -0.64159326,-0.96638724 -0.64159326,-1.42980516 0.0,-0.53436852 0.43841574000000005,-1.5877638 1.10049408,-2.64418812 1.47641004,-2.35579428 1.91784222,-3.69949734 2.2321089,-6.7944618000000006 0.04222008,-0.4158 0.10844063999999999,-0.968625 0.1471554,-1.2285 l 0.07039242,-0.47250000000000003 -0.4835754,-0.005481 c -0.74361798,-0.008442 -1.57329396,-0.19940256 -1.6939881,-0.38989944 -0.05980086,-0.09438786 -0.10959732000000001,-0.32101776 -0.11065824,-0.503622 -0.0021420000000000002,-0.36926064 0.33487271999999996,-0.64839852 1.02114306,-0.84576744 0.31053708,-0.08931006000000001 0.35032409999999997,-0.12557538000000001 0.14686056,-0.13385988000000001 -0.1534869,-0.0062496 -0.34258266000000004,-0.1300446 -0.42021378000000004,-0.27509958 -0.22069404,-0.41237028000000003 -0.045434340000000004,-0.81701046 0.4571658,-1.05550956 0.68287338,-0.32405058 0.9351153,-0.6345591840000001 0.9351153,-1.151127054 0.0,-0.334582668 -0.08304282,-0.519687378 -0.315,-0.7021450800000001 -0.34376706,-0.270407592 -0.39978539999999996,-0.6615482580000001 -0.16769592000000003,-1.170928836 0.12946626,-0.284147262 0.10754982,-0.36497034 -0.18098388,-0.667428678 -0.5979582,-0.62681535 -0.7453656000000001,-1.449815724 -0.44267076,-2.471512806 0.15005214,-0.5064815699999999 1.00722384,-1.483235838 2.13872148,-2.4370914960000003 0.43368318,-0.365596182 0.4558239,-0.417601044 0.32516694,-0.763750764 -0.11676546,-0.309347388 -0.09867312,-0.442684242 0.10822517999999999,-0.79760898 0.2436777,-0.41801810400000006 0.26660088000000004,-0.42686418600000003 1.198797642,-0.462615678 1.2535903800000001,-0.048077568 1.291752,-0.0012789 1.38127122,1.693847484 0.0090216,0.170880696 0.31682699999999997,0.520881354 0.8310645,0.9450000000000001 0.928683,0.76593321 1.37260494,1.433552778 1.53647928,2.310730002 0.1406034,0.7526170259999999 -0.0958356,1.649095056 -0.54663336,2.0725970580000004 -0.29721384,0.27921789 -0.30273894,0.310471938 -0.11802294,0.667672614 0.24160878,0.467219592 0.14537754,0.884342718 -0.26623926000000003,1.154044962 -0.65646504,0.43013187 -0.28827414,1.291365936 0.79938054,1.869830172 0.35389872,0.18822006000000002 0.40668390000000004,0.27703494 0.37271304,0.6271272 -0.0273168,0.28153187999999996 -0.1334403,0.4543875 -0.34264188,0.55809936 -0.29675268,0.1471176 -0.29214989999999996,0.15318828 0.22083768,0.29132082 0.59323446,0.15974154 0.96692148,0.6077068200000001 0.84014532,1.0071432 -0.11590740000000001,0.36519461999999997 -0.44943066,0.5083596 -1.38861198,0.5960619 -0.7912409400000001,0.0738864 -0.81830322,0.08793036 -0.81830322,0.42463386 0.0,0.69710004 0.40243392,3.48279246 0.63918162,4.424482439999999 0.32335127999999996,1.28616642 0.5606244,1.8124583399999998 1.52422452,3.3808572 1.51451874,2.46509802 1.6351183800000002,3.25018764 0.6720953399999999,4.375264319999999 -0.24282594,0.28368648 -0.44150148,0.56886858 -0.44150148,0.63373716 0.0,0.26496918 0.5205501,0.5284818 2.0275567199999998,1.0263884399999998 1.85804388,0.61388712 2.24726922,0.9165895199999999 2.34994914,1.82756448 0.08257536,0.73260558 -0.15103872000000002,1.10538414 -0.94587318,1.50933006 l -0.59640084,0.30310056 0.50988546,0.13729841999999998 c 1.4397982200000001,0.38769696000000003 1.75850892,2.16524574 0.5232654,2.91841704 -0.38951136,0.23749992 -0.69150438,0.24587514 -8.7823827,0.24355926 -7.375854402,-0.0021168 -8.427292902000001,-0.02621052 -8.782377282,-0.20130138 z"
            const d1 = "M 11.90625,7.2812485 V 29.770833 c 0.168748,1.648752 1.117778,2.458568 2.645833,2.645833 H 27.78125 c 1.556311,-0.181849 2.474028,-1.026657 2.645833,-2.645833 V 7.2812485 C 30.254913,5.6649882 29.340393,4.8167458 27.78125,4.6354152 H 14.552083 C 12.889501,4.8031227 12.09615,5.7661248 11.90625,7.2812485 Z"
            const d2 = "m 23.8125,4.6354152 c 1.494344,0.1943524 2.47931,0.9606266 2.645833,2.6458333 V 29.770833 c -0.165919,1.327478 -1.17786,2.128534 -2.645833,2.645833"

            // paper
            const paper = Raphael(tgt_node, grid_seize_px_w + os * 2, grid_seize_px_h + os * 2)

            // draw grid
            for (let i = 0; i < height; i += 1) {
                for (let j = 0; j < width; j += 1) {
                    paper.rect(j * unit + os, i * unit + os, unit, unit).attr(attr.grid).attr({'stroke-width': 1 * scale + 'px'})
                }
            }

            // draw aliens
            const aliens_coords = []
            if (aliens) {
                aliens.forEach((value)=>{
                    const [x, y] = value.values
                    aliens_coords.push([x, y])
                    draw_alien(x, y, scale)
                })
            }

            // draw bishop
            draw_bishop(...bishop, scale)

            // draw escape_path
            const [good_ways, bad_ways] = escape_way()
            const answer_ways = good_ways.length ? good_ways : bad_ways
            answer_ways.forEach(way=>{
                let escape_path = ['M', (sx+.5) * unit + os, (sy+.5) * unit + os,]
                way.forEach(([x, y])=>{
                    escape_path = escape_path.concat(['L', (x+.5) * unit + os, (y+.5) * unit + os])
                })
                paper.path(escape_path).attr(attr.escape_way)
            })

            // draw doors
            exits.forEach(([x, y])=>{
                draw_door(x, y, scale)
            })

            /**
            * 
            * svg coordinates scaling
            * 
            */
            function scaling(d1, scale){
                let result = ''
                let digit = ''
                d1.split('').forEach(d=>{
                    if ('0123456789.-'.indexOf(d) > -1){
                        digit += d
                    } else {
                        if (digit != ''){
                            result += parseFloat(digit) * scale
                            digit = ''
                        }
                        result += d
                    }
                })

                if (digit != ''){
                    result += parseFloat(digit) * scale
                }
                return result
            }

            /**
            *
            * draw air-lock
            *
            */
            function draw_door(dx, dy, scale) {
                const door_set = paper.set()
                door_set.push(paper.path(scaling(d1, scale))).attr(attr.door).attr({'stroke-width': 1 * scale + 'px'})
                door_set.push(paper.path(scaling(d2, scale))).attr(attr.door).attr({'stroke-width': 1 * scale + 'px'})
                dx = dx * unit + 0 * scale + os 
                dy = dy * unit + 1 * scale + os
                door_set.transform(`s1t${dx},${dy}`)
            }

            /**
            *
            * draw bishop
            *
            */

            function draw_bishop(bx, by, scale) {
                const bishop = paper.path(scaling(b1, scale)).attr(attr.bishop)
                bx = bx * unit + 7 * scale + os
                by = by * unit + 0 * scale + os
                bishop.transform(`s1t${bx},${by}`)
            }

            /**
            *
            * draw alien
            *
            */
            function draw_alien(ax, ay, scale) {
                const alien_set = paper.set()
                alien_set.push(paper.path(scaling(a1, scale)).attr(attr.alien.face))
                alien_set.push(paper.path(scaling(a2, scale)).attr(attr.alien.eye))
                alien_set.push(paper.path(scaling(a3, scale)).attr(attr.alien.eye))
                ax = ax * unit + 0 * scale + os
                ay = ay * unit - 5 * scale + os
                alien_set.transform(`s1t${ax},${ay}`)
            }

            /**
            * 
            * ary_equals
            * 
            */
            function ary_equals(a, b) {
                let j = b.length
                while (j--) {
                    if (a[j] != b[j]) {
                        return false
                    }
                }
                return true
            }

            /**
            * 
            * ary_includes
            * 
            */
            function ary_includes(a, b) {
                let i = b.length
                while (i--) {
                    if (ary_equals(a, b[i])) {
                        return i
                    }
                }
                return -1
            }

            /**
            * 
            * make escape_way
            * 
            */
            function escape_way() {
                let way = [];
                let good_ways = []
                let bad_ways = []
                const ds = [[-1, -1], [-1, 1], [1, -1], [1, 1]]

                ds.forEach(([dx, dy])=>{
                    way = [[sx, sy]]
                    if ((sx + dx) >= 0 && (sx + dx) < width && (sy + dy) >= 0 && (sy + dy) < height) {
                        let [mx, my] = [sx, sy]
                        while (true) {
                            mx += dx
                            my += dy
                            way.push([mx, my])
                            if (ary_includes([mx, my], aliens_coords) > -1) {
                                bad_ways.push(way.slice(0, way.length))
                                break
                            }
                            if (ary_equals([mx, my], [sx, sy])) {
                                bad_ways.push(way.slice(0, way.length))
                                break
                            }
                            if (ary_includes([mx, my], exits) > -1) {
                                good_ways.push(way.slice(0, way.length))
                                break
                            }
                            if ([0, height-1].includes(my)){
                                dy *= -1
                            }
                            if ([0, width-1].includes(mx)){
                                dx *= -1
                            }
                        }
                    }
                })
                return [good_ways, bad_ways]
            }
        }
        var io = new extIO({
            animation: function($expl, data){
                bishopVsAliensVisualization(
                    $expl[0],
                    data,
                );
            }
        });
        io.start();
    }
);
